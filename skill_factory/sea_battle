from random import randint

class BoardException(Exception):  # общий класс исключений для обнаружения ошибок
    pass

class BoardOutException(BoardException):  # класс для обнаружения выстрела за границу доски
    def __str__(self):
        return "Вы пытаетесь выстрелить мимо доски!"

class BoardUsedException(BoardException): # класс для обнаружения выстрела в ту же клетку
    def __str__(self):
        return "Вы уже стреляли в эту клетку" 

class BoardWrongShipException(BoardException): # исключение для проверки распределения кораблей, скрытое от пользователя
    pass
    
class Dot:  # класс для координат на доске
    def __init__(self, x, y):
        self.x = x
        self.y = y
    
    def __eq__(self, other):
        return self.x == other.x and self.y == other.y
    
    def __repr__(self):
        return f"({self.x}, {self.y})"


class Ship:                    # класс для кораблей
    def __init__(self, bow, length, dir):
        self.bow = bow         # отправная точка экземпляра ship (по сути, экземпляра Dot-класса)
        self.length = length             # количество точек на борту, представляющих экземпляр судна
        self.dir = dir             # ориентация экземпляра судна на борту, горизонтальная/вертикальная
        self.lives = length
    
    @property                  # чтобы скрыть внутреннюю структуру метода
    def dots(self):
        ship_dots = []
        for i in range(self.length):  # установка ориентации экземпляра корабля на борту
            cur_x = self.bow.x        # атрибут X экземпляра класса Dot
            cur_y = self.bow.y        # атрибут Y экземпляра класса Dot
            
            if self.dir == 0:         # вертикальная ориентация путем добавления длины судна
                cur_x += i            # для изменения координаты x
            
            elif self.dir == 1:       # горизонтальная ориентация путем добавления длины судна
                cur_y += i            # для изменения координаты y
            
            ship_dots.append(Dot(cur_x, cur_y))
        
        return ship_dots
    
    def shooten(self, shot):         # метод показать, попали в корабль или нет
        return shot in self.dots

class Board:
    def __init__(self, hid = False, size = 9):
        self.size = size
        self.hid = hid
        
        self.count = 0                                       # количество пораженных судов
        self.field = [ [" "] * size for _ in range(size) ]   # атрибут двумерного массива
        
        self.busy = []                   # список занятых кораблями или попаданиями точек в поле
        self.ships = []                  # список всех кораблей в поле
        
     def __str__(self):
        res = ""
        res += "    1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 |"
        res += "\n   ——— ——— ——— ——— ——— ——— ——— ——— ———"
        for i, row in enumerate(self.field):
            res += f"\n{i+1} | " + " | ".join(row) + " |"
            res += "\n   ——— ——— ——— ——— ——— ——— ——— ——— ———"
        
        if self.hid:
            res = res.replace("■", " ")
        return res
    
    def out(self, dot):  # способ определения того, находится ли точка вне диапазона поля
        return not((0 <= dot.x < self.size) and (0 <= dot.y < self.size))

    
    def contour(self, ship, verb=False):
        around = [
            (-1, -1), (-1, 0), (0, -1),
            (-1, 1), (0, 0), (0, 1),
            (1, 0), (1, 1), (1, -1)   
        ]
        for dot in ship.dots:
            for dx, dy in around:
                cur = Dot(dot.x + dx, dot.y + dy)
                if not(self.out(cur)) and cur not in self.busy_dots:
                    if verb:       # method puts '.' around ship to show busy cells
                        self.field[cur.x][cur.y] = "."
                    self.busy_dots.append(cur)
                    
                    
    def add_ship(self, ship):
        for dot in ship.dots:
            if self.out(dot) or dot in self.busy:
                raise BoardWrongShipException()
        for dot in ship.dots:
            self.field[dot.x][dot.y] = "■"
            self.busy.append(dot)
        
        self.ships.append(ship)
        self.contour(ship)
            
    
    def shot(self, dot):
        if self.out(dot):
            raise BoardOutException()
        
        if dot in self.busy:
            raise BoardUsedException()
        
        self.busy.append(dot)
        
        for ship in self.ships:
            if dot in ship.dots:
                ship.lives -= 1
                self.field[dot.x][dot.y] = "X"
                if ship.lives == 0:
                    self.count += 1
                    self.contour(ship, verb = True)
                    print("Корабль уничтожен!")
                    return False
                else:
                    print("Корабль ранен!")
                    return True
        
        self.field[dot.x][dot.y] = "."
        print("Мимо!")
        return False
    
    def begin(self):
        self.busy = []
        
    def defeat(self):
        return self.count == len(self.ships)
        

class Player:      # Общий класс для всех игроков
    def __init__(self, board, enemy):
        self.board = board
        self.enemy = enemy
    
    def ask(self):    # Метод должен быть определен в производных классах игроков. Теперь это ошибка.
        raise NotImplementedError()
    
    def move(self): 
        while True:    # Бесконечный цикл для совершения ходов
            try:
                target = self.ask()
                repeat = self.enemy.shot(target)
                return repeat
            except BoardException as e:
                print(e)


class AI(Player):
    def ask(self):
        move = Dot(randint(0, 8), randint(0, 8))
        print(f"Ход компьютера: {move.x + 1} {move.y + 1}")
        return move

class User(Player):
    def ask(self):
        while True:
            cords = input("Ваш ход: ").split()
            
            if len(cords) != 2:
                print("Введите 2 координаты! ")
                continue
            
            x, y = cords
            
            if not(x.isdigit()) or not(y.isdigit()):
                print(" Введите числа! ")
                continue
            
            x, y = int(x), int(y)
            
            return Dot((x - 1), (y - 1))


class Game:
    def __init__(self, size=9):
        self.ship_nums = [3, 3, 2, 2, 2, 1, 1, 1, 1]
        self.size = size
        player = self.random_board()
        comp = self.random_board()
        comp.hid = False
        
        self.ai = AI(comp, player)
        self.pl = User(player, comp)
        
    def try_board(self):
        board = Board(size=self.size)
        attempts = 0
        for length in self.ship_nums:
            attempts += 1
            if attempts > 2000:
                return None
            ship = Ship(Dot(randint(0, self.size), randint(0, self.size)), length, randint(0, 1))
            try:
                board.add_ship(ship)
                break
            except BoardWrongShipException:
                pass
        board.begin()
        return board
    
    def random_board(self):
        board = None
        while board is None:
            board = self.try_board()
        return board

    @staticmethod
    def greet():
        print("+++++++++++++++++++++++++++++++++++++++++++++")
        print('   Приветствуем Вас в игре "Морской Бой"!    ')
        print("+++++++++++++++++++++++++++++++++++++++++++++")
        print(" Выполняйте ходы по очереди с AI-соперником. ")
        print("     Ход состоит из ввода 2-х координат:     ")
        print("     Х - номер строки, У - номер столбца.    ")
        print("Необходимо уничтожить все корабли противника.")
        print("             Желаем Вам удачи!!!             ")
        print("+++++++++++++++++++++++++++++++++++++++++++++")

    def print_boards(self):
        print("-" * 40)
        print("Доска игрока.")
        print(self.pl.board)
        print("-" * 40)
        print("Доска компьютера.")
        print(self.ai.board)
        print("-" * 40)

    def loop(self):
        num = 0
        while True:
            self.print_boards()
            if num % 2 == 0:
                print("Ходит игрок")
                repeat = self.pl.move()
            else:
                print("Ходит компьютер")
                repeat = self.ai.move()
                    
            if repeat:
                num -= 1
                    
            if self.ai.board.defeat():
                self.print_boards()
                print("-" * 40)
                print("Выиграл игрок")
                break
                    
            if self.pl.board.defeat():
                self.print_boards()
                print("-" * 40)
                print("Выиграл компьютер")
                break
            num += 1
                
    def start(self):
        self.greet()
        self.loop()

        
g = Game()
g.start()
